@using MyPermutationSolution.Client.Interfaces
@using MyPermutationSolution.Shared.DTO.Request
@using MyPermutationSolution.Shared.DTO.Response
@using MyPermutationSolution.Shared.Models
@inject IPermutationService permutationService

<h3>This is the vector </h3>
@if (!string.IsNullOrWhiteSpace(ListOfNumbers))
{
    <h4>@ListOfNumbers </h4>
}
else
{
    <h4>-- The vector is empty --</h4>
}


<div class="container d-flex justify-content-center pb-5">
    <EditForm Model="@model" OnValidSubmit="@AddNumber">
        <DataAnnotationsValidator />
        <div class="form-group col-12">
            <label>Add a number:</label>
            <div class="col-12 pt-2 pb-2">
                <InputText @bind-Value="@model.NumberAdded"
                           class="form-control"
                           placeholder="Only Numbers between 0 and 100" />
            </div>
            <ValidationMessage For="@(() => model.NumberAdded)" />
        </div>

        <button type="button" class="btn btn-primary mx-1" disabled="@(TotalOfNumbers >= 100)" @onclick="AddNumber">Add to the Vector</button>
        <button type="button" class="btn btn-secondary" @onclick="CleanList">Clean Vector</button>
    </EditForm>
</div>

<h3>This is the next permutation </h3>
@if (Loading)
{
    <div>
        <CallLoading Message="Calculating"></CallLoading>
    </div>
}
else
{
    @if (!string.IsNullOrWhiteSpace(ListOfNumbers))
    {
        <h4>@result </h4>
    }
    else
    {
        <h4>-- There is no result yet --</h4>
    }
    <div class="container justify-content-center">
        <button type="button" class="btn btn-primary mx-1" disabled="@(TotalOfNumbers == 0)" @onclick="Calculate">Calculate</button>
    </div>
}


@code {

    private string ListOfNumbers = "";
    private int TotalOfNumbers { get; set; } = 0;
    private NumberModel model = new NumberModel();
    private string disableAdd = "disabled";
    private string result { get; set; } = "";
    private bool Loading { get; set; } = false;
    private void AddNumber()
    {
        if (!string.IsNullOrWhiteSpace(model.NumberAdded))
        {
            if (int.TryParse(model.NumberAdded, out int number))
            {
                if (number < 1 || number > 100)
                {                 
                    return;
                }
                model.AllNumbers.Add(number);
            }
                

            if (!string.IsNullOrWhiteSpace(ListOfNumbers))
            {
                ListOfNumbers = ListOfNumbers + "," + model.NumberAdded;
                TotalOfNumbers++;
            }
            else
            {
                ListOfNumbers = model.NumberAdded;
                TotalOfNumbers = 1;
            }

            model.NumberAdded = string.Empty;
        }
    }

    private void CleanList()
    {
        model.AllNumbers.Clear();
        ListOfNumbers = "";
        TotalOfNumbers = 0;
        result = "";
    }

    private async Task Calculate()
    {
        Loading = true;
        var request = new PermutationRequest
        {
            Vector = model.AllNumbers.ToArray(),
            ClientId = "My web solution"
        };
        PermutationResponse resulttemp = await permutationService.GetNextPermutation(request);

        result = string.Join(", ", resulttemp.ResponseData);
        Loading = false;
    }
}